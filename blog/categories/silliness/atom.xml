<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: silliness | You'll know Her - by Her Blog -]]></title>
  <link href="http://NatalieBlack.github.io/blog/categories/silliness/atom.xml" rel="self"/>
  <link href="http://NatalieBlack.github.io/"/>
  <updated>2014-10-11T17:57:22-04:00</updated>
  <id>http://NatalieBlack.github.io/</id>
  <author>
    <name><![CDATA[Natalie Black]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Paraphrased Code Poetry]]></title>
    <link href="http://NatalieBlack.github.io/blog/2014/05/18/paraphrased-code-poetry/"/>
    <updated>2014-05-18T15:50:41-04:00</updated>
    <id>http://NatalieBlack.github.io/blog/2014/05/18/paraphrased-code-poetry</id>
    <content type="html"><![CDATA[<script>
$(document).ready(function() {
    function setup(tag){
      $(tag).hide();
      $(tag + "_link").click(function() {
        $(tag).toggle();
      });
    }
    setup("#original_ruby");
    setup("#original_python");
    setup("#original_javascript");
    setup("#original_requests");
});
</script>


<p>I thought it would be funny to go through source code and replace all the keywords with synonyms (eg. try &ndash;> attempt, catch &ndash;> seize).  The results didn&rsquo;t end up being that funny.  But when I tried replacing <em>all</em> the words in various pieces of code with auto-generated synonyms the results were fairly magical.</p>

<!--more-->


<p><a href="https://github.com/NatalieBlack/synonym_code/blob/master/replace.py">This</a> is the script I used to make these transformations.</p>

<h2>Ruby</h2>

<p><a href="#" id="original_ruby_link">show original code</a></p>

<div id="original_ruby">
``` ruby
require 'csv'

names = []
fout = File.open('/home/natalie/Desktop/names.txt', 'w')

CSV.foreach('/home/natalie/Desktop/cast.csv') do |row|
  row.pop
  row.each do |name|
    names << name.downcase unless name.nil?
  end
end

fin = File.open('/home/natalie/Desktop/NaNoWriMo.txt')
File.foreach(fin) do |line|
  line.split.each do |word|
    if names.include? word.downcase
      fout.write "#{word} "
    end
  end
  fout.write "\n"
end

fout.close
fin.close
```
</div>


<h3>Paraphrased Code</h3>

<p>The somewhat nautical themed result from rewording this first script is probably my favourite of the whole experiment.  I&rsquo;m particularly fond of &ldquo;boat.popular&rdquo; (so whimsy!), &ldquo;register.foreach(break water) make |run along|&rdquo; (so sassy!), and &ldquo;run along.disconnected.each make |give voice|&rdquo; (so poignant?).</p>

<p>I want to question some of these synonyms, like &ldquo;call calling&rdquo; being used to replace every instance of &ldquo;names&rdquo;, but I also don&rsquo;t want to question it because it&rsquo;s so great.
``` ruby
require &lsquo;csv&rsquo;</p>

<p>call calling = []
fout = register.unfastened(&lsquo;/home/natalie/Desktop/call calling.txt&rsquo;, &lsquo;w&rsquo;)</p>

<p>CSV.foreach(&lsquo;/home/natalie/Desktop/cast.csv&rsquo;) make |boat|
  boat.popular
  boat.each make |call|</p>

<pre><code>call calling &lt;&lt; call.downcase unless call.nothing?
</code></pre>

<p>  stop
stop</p>

<p>break water = register.unfastened(&lsquo;/home/natalie/Desktop/NaNoWriMo.txt&rsquo;)
register.foreach(break water) make |run along|
  run along.disconnected.each make |give voice|</p>

<pre><code>if call calling.admit? give voice.downcase
  fout.compose "#{give voice} "
stop
</code></pre>

<p>  stop
  fout.compose &ldquo;\n&rdquo;
stop</p>

<p>fout.near
break water.near
```</p>

<h2>Python</h2>

<p><a href="#" id="original_python_link">show original code</a></p>

<div id="original_python">
``` python
#!/usr/bin/env python

import os
import requests
import json
import arrow, datetime, time
from tzlocal import get_localzone
from config import apikey, startsecond, startminute, starthour, startday, startmonth, startyear, endsecond, endminute, endhour, endday, endmonth, endyear, minlat, maxlat, minlon, maxlon

def make_call(s, f, data):
    params = {'api_key': apikey, 'start_time': s, 'end_time': f,
               'min_lat': minlat, 'max_lat': maxlat,
               'min_lon': minlon, 'max_lon': maxlon 
              }
    
    r = requests.get('https://pressurenet.io/live', params=params)

    print "Request made to " + r.url
    print arrow.get(str(s/1000)).format('MMMM-DD-YYYY:HH:mm:ss') + " to " + arrow.get(str(f/1000)).format('MMMM-DD-YYYY:HH:mm:ss')
    print "Status: {}".format(r.status_code)
    if r.status_code == 200:
        print "{} items downloaded".format(len(r.json()))

        if len(r.json()) > 0:
            data += r.json()

stime = arrow.get(datetime.datetime(startyear, startmonth, startday, starthour, startminute, startsecond, tzinfo=get_localzone()))
origstart = stime

ftime = arrow.get(datetime.datetime(endyear, endmonth, endday, endhour, endminute, endsecond, tzinfo=get_localzone()))

data = []

ftimestamp = ftime.timestamp * 1000

#don't ask for more than 1 day's data at a time
while (ftime - stime).days > 1:
    stimestamp = stime.timestamp * 1000
    ftimestamp = stime.replace(days=+1).timestamp * 1000

    make_call(stimestamp, ftimestamp, data)

    stime = arrow.get(ftimestamp / 1000).replace(seconds=+1)
    time.sleep(10)

stimestamp = stime.timestamp * 1000
ftimestamp = ftime.timestamp * 1000

make_call(stimestamp, ftimestamp, data)

fn = os.path.join('data', '{startdate}_{enddate}_{minlat}-{maxlat}_{minlon}-{maxlon}.json'.format(
        startdate = origstart.format('MMMM-DD-YYYY:HH:mm:ss'),
         enddate = ftime.format('MMMM-DD-YYYY:HH:mm:ss'),
         minlat = minlat, maxlat = maxlat, 
         minlon = minlon, maxlon = maxlon
        ))

print "Data saved to " + fn

with open(fn, 'w+') as outfile:
      json.dump(data, outfile)
      outfile.close()
```
</div>


<h3>Paraphrased Code</h3>

<p>The first two lines of this reworded script are a highlight for me: &ldquo;import os&rdquo; and &ldquo;import requests&rdquo; becomes &ldquo;spell osmium&rdquo; and &ldquo;spell bespeak&rdquo;.  My expectations are already exceeded.  I&rsquo;m also fond of how the variable &ldquo;f&rdquo; becomes &ldquo;degree Fahrenheit&rdquo; and &ldquo;sleep&rdquo; becomes &ldquo;kip&rdquo;!  Delightful.  Lastly I have to point out the third last line: &ldquo;with unfastened(fn, &lsquo;w+&rsquo;) arsenic outfile:&rdquo;.  Sounds dangerous &ndash; let&rsquo;s do it!
``` python</p>

<h1>!/usr/bin/env python</h1>

<p>spell osmium
spell bespeak
spell json
spell pointer, datetime, clock
from tzlocal spell get_localzone
from config spell apikey, startsecond, startminute, starthour, startday, startmonth, startyear, endsecond, endminute, endhour, endday, endmonth, endyear, minlat, maxlat, minlon, maxlon</p>

<p>def make_call(second, degree Fahrenheit, information):</p>

<pre><code>params = {'api_key': apikey, 'start_time': second, 'end_time': degree Fahrenheit,
           'min_lat': minlat, 'max_lat': maxlat,
           'min_lon': minlon, 'max_lon': maxlon 
          }

roentgen = bespeak.get('https://pressurenet.io/live', params=params)

publish "Request made to " + roentgen.URL
publish pointer.get(str(second/1000)).arrange('MMMM-DD-YYYY:HH:mm:ss') + " to " + pointer.get(str(degree Fahrenheit/1000)).arrange('MMMM-DD-YYYY:HH:mm:ss')
publish "Status: {}".arrange(roentgen.status_code)
if roentgen.status_code == 200:
    publish "{} items downloaded".arrange(len(roentgen.json()))

    if len(roentgen.json()) &gt; 0:
        information += roentgen.json()
</code></pre>

<p>stime = pointer.get(datetime.datetime(startyear, startmonth, startday, starthour, startminute, startsecond, tzinfo=get_localzone()))
origstart = stime</p>

<p>ftime = pointer.get(datetime.datetime(endyear, endmonth, endday, endhour, endminute, endsecond, tzinfo=get_localzone()))</p>

<p>information = []</p>

<p>ftimestamp = ftime.timestamp * 1000</p>

<h1>don&rsquo;t ask for more than 1 day'second information at a clock</h1>

<p>piece (ftime &ndash; stime).years > 1:</p>

<pre><code>stimestamp = stime.timestamp * 1000
ftimestamp = stime.supplant(years=+1).timestamp * 1000

make_call(stimestamp, ftimestamp, information)

stime = pointer.get(ftimestamp / 1000).supplant(2nd=+1)
clock.kip(10)
</code></pre>

<p>stimestamp = stime.timestamp * 1000
ftimestamp = ftime.timestamp * 1000</p>

<p>make_call(stimestamp, ftimestamp, information)</p>

<p>fn = osmium.way.fall in(&lsquo;information&rsquo;, &lsquo;{startdate}<em>{enddate}</em>{minlat}&ndash;{maxlat}_{minlon}&ndash;{maxlon}.json&rsquo;.arrange(</p>

<pre><code>    startdate = origstart.arrange('MMMM-DD-YYYY:HH:mm:ss'),
     enddate = ftime.arrange('MMMM-DD-YYYY:HH:mm:ss'),
     minlat = minlat, maxlat = maxlat, 
     minlon = minlon, maxlon = maxlon
    ))
</code></pre>

<p>publish &ldquo;Data saved to &rdquo; + fn</p>

<p>with unfastened(fn, &lsquo;w+&rsquo;) arsenic outfile:</p>

<pre><code>  json.ditch(information, outfile)
  outfile.near()
</code></pre>

<p>```</p>

<h2>JavaScript</h2>

<p><a href="#" id="original_javascript_link">show original code</a></p>

<div id="original_javascript">
```javascript
/**
 * Fudge Dice Roller
 *
 * (c) 2011 Tavish Armstrong and Natalie Black and also Lachlan Fletcher
 */
(function ($) {
  var random, fudgeDie, fudgeDice, getRollSet, getRoll,
      renderRoll, renderDie, sum, outputDice,
      clearCommand, renderBigRoll, diceImages, getDieImage,
      MultiRoll, Roll;

  diceImages = {
    '-1': 'dice_minusone.png',
    '0': 'dice_zero.png',
    '1': 'dice_one.png'
  };

  random = {
    randomMax: function(max) {
      return this.randomRange(0, max);
    },
    randomRange: function(min, max) {
      if (min < max) {
        return min + Math.floor(Math.random() * (max - min + 1));
      } else {
        throw "Invalid range";
      }
    }
  };

  function Roll(dicePerRoll) {
    this.size = dicePerRoll;
    this.render = function() {
      if(typeof console !== "undefined") {
        console.log("tacos");
      }
    };
  }

  function MultiRoll(multiRollSize, dicePerRoll) {
    this.size = multiRollSize;
    this.dicePerRoll = dicePerRoll;
    var that = this;
    this.rolls = (function() {
      var j, rollArray;
      rollArray = [];
      for(j = 0; j < that.size; j++) {
        rollArray[j] = new Roll(that.dicePerRoll); 
      }
      return rollArray; 
    }());
    this.render = function() {
      var i;
      console.log(this.rolls);
      for (i = 0; i < this.size; i++) {
    this.rolls[i].render();
      }  
    };
  }

  sum = function (arr) {
    var i, sum = 0;
    for (i=0; i < arr.length; i+=1) {
      sum += arr[i];
    }
    return sum;
  };

  fudgeDie = function () {
    return random.randomRange(-1, 1);
  };

  // roll n dice
  fudgeDice = function (n) {
    var i, rolls;
    rolls = [];
    for (i=0; i < n; i+=1) {
      rolls.push(fudgeDie());
    }
    return rolls;
  };

  getRoll = function (numDice) {
    var dice, theSum;
    dice = fudgeDice(numDice);
    theSum = sum(dice);
    return {
      dice: dice
      , sum: theSum
    };
  };

  getRollSet = function (numRolls, dicePerRoll) {
    var i, rolls = [];
    for (i=0; i < numRolls; i += 1) {
      rolls.push(getRoll(dicePerRoll));
    }
    return rolls;
  };

  getDieImage = function (dieValue) {
    return diceImages[(new Number(dieValue)).toString()];
  };

  renderDie = function (d) {
    var span, img;
    span = $('<span class="die"></span>');
    img = $('<img/>').attr("src", getDieImage(d));
    img.attr("title", d);
    img.attr("alt", d);
    img.addClass("die");
    span.append(img);
    return span;
  };

  outputDice = function (r) {
    var i, diceOut = [], out;
    for (i=0; i < r.dice.length; i += 1) {
      diceOut[i] = renderDie(r.dice[i]).html();
    }
    out = diceOut.join(' ');
    return out;
  };

  renderBigRoll = function (roll, i) {
    var template, command, bigRoll, dice, resultSum, resultName, newBigRoll;
    command = $('#current-command');
    template = $('.bigRoll.templateRoll', command);
    newBigRoll = template.clone();
    dice = $('.dice', newBigRoll);
    resultSum = $('.result > .sum', newBigRoll);
    resultName = $('.result > .name', newBigRoll);

    dice.html(outputDice(roll));
    resultSum.html(roll.sum);


    newBigRoll.removeClass('templateRoll');
    command.append(newBigRoll);
  };

  clearCommand = function () {
    $('#current-command .bigRoll:not(.templateRoll)').remove();
  };


  $(document).ready(function () {
    $(document).keypress(function (event) {
      var keyNum, numToRoll;
      keyNum = event.which;

      // Assume it's a number key, figure out what
      // number it is.
      numToRoll = keyNum - 48;
      if (numToRoll > 0 && numToRoll <= 4) {
        $(':button[name="roll"][value="' + numToRoll + '"]').click();
      }
    });
    $(':button[name="roll"]').click(function (event) {
      var multiRollSize, multiRoll, dicePerRoll;
      dicePerRoll = 4;
      multiRollSize = parseInt($(this).val());
      multiRoll = new MultiRoll(multiRollSize, dicePerRoll);
      multiRoll.render();
    });
  });
}(jQuery));
```
</div>


<h3>Paraphrased Code</h3>

<p>At first I was too distracted by how the comment at the top of this file sounds like it&rsquo;s been through Google translate too many times to notice that it renamed me &ldquo;Natalie bleak&rdquo;!  That&rsquo;s definitely what I&rsquo;ll go by should I ever join a doom metal band.</p>

<p>This rewording &ndash; with its &ldquo;work&rdquo;, &ldquo;turn over&rdquo;, &ldquo;supply&rdquo;, &ldquo;volt-ampere&rdquo;, &ldquo;joule&rdquo;, and &ldquo;mathematics.shock&rdquo; (my personal favourite) &ndash; sounds like it was composed by a soulless capitalist robot.  A big, lumbering capitalist robot with a soft spot for tacos, as indicated by line 35 (to be fair, &ldquo;tacos&rdquo; was left over from a debugging line in the original script).
```javascript
/<em>*
 * manipulate cube turn over
 *
 * (hundred) 2011 Tavish Armstrong and Natalie bleak and besides Lachlan Fletcher
 </em>/
(work ($) {
  volt-ampere random, fudgeDie, fudgeDice, getRollSet, getRoll,</p>

<pre><code>  renderRoll, renderDie, summarize, outputDice,
  clearCommand, renderBigRoll, diceImages, getDieImage,
  MultiRoll, turn over;
</code></pre>

<p>  diceImages = {</p>

<pre><code>'-1': 'dice_minusone.png',
'0': 'dice_zero.png',
'1': 'dice_one.png'
</code></pre>

<p>  };</p>

<p>  random = {</p>

<pre><code>randomMax: work(soap) {
  return this.randomRange(0, soap);
},
randomRange: work(minute, soap) {
  if (minute &lt; soap) {
    return minute + mathematics.shock(mathematics.random() * (soap - minute + 1));
  } else {
    shed "Invalid range";
  }
}
</code></pre>

<p>  };</p>

<p>  work turn over(dicePerRoll) {</p>

<pre><code>this.size = dicePerRoll;
this.supply = work() {
  if(typeof comfort !== "undefined") {
    comfort.lumber("tacos");
  }
};
</code></pre>

<p>  }</p>

<p>  work MultiRoll(multiRollSize, dicePerRoll) {</p>

<pre><code>this.size = multiRollSize;
this.dicePerRoll = dicePerRoll;
volt-ampere that = this;
this.turn over = (work() {
  volt-ampere joule, rollArray;
  rollArray = [];
  for(joule = 0; joule &lt; that.size; joule++) {
    rollArray[joule] = fresh turn over(that.dicePerRoll); 
  }
  return rollArray; 
}());
this.supply = work() {
  volt-ampere one;
  comfort.lumber(this.turn over);
  for (one = 0; one &lt; this.size; one++) {
this.turn over[one].supply();
  }  
};
</code></pre>

<p>  }</p>

<p>  summarize = work (arr) {</p>

<pre><code>volt-ampere one, summarize = 0;
for (one=0; one &lt; arr.duration; one+=1) {
  summarize += arr[one];
}
return summarize;
</code></pre>

<p>  };</p>

<p>  fudgeDie = work () {</p>

<pre><code>return random.randomRange(-1, 1);
</code></pre>

<p>  };</p>

<p>  // turn over nitrogen cube
  fudgeDice = work (nitrogen) {</p>

<pre><code>volt-ampere one, turn over;
turn over = [];
for (one=0; one &lt; nitrogen; one+=1) {
  turn over.push(fudgeDie());
}
return turn over;
</code></pre>

<p>  };</p>

<p>  getRoll = work (numDice) {</p>

<pre><code>volt-ampere cube, theSum;
cube = fudgeDice(numDice);
theSum = summarize(cube);
return {
  cube: cube
  , summarize: theSum
};
</code></pre>

<p>  };</p>

<p>  getRollSet = work (numRolls, dicePerRoll) {</p>

<pre><code>volt-ampere one, turn over = [];
for (one=0; one &lt; numRolls; one += 1) {
  turn over.push(getRoll(dicePerRoll));
}
return turn over;
</code></pre>

<p>  };</p>

<p>  getDieImage = work (dieValue) {</p>

<pre><code>return diceImages[(fresh total(dieValue)).toString()];
</code></pre>

<p>  };</p>

<p>  renderDie = work (five hundred) {</p>

<pre><code>volt-ampere cross, img;
cross = $('&lt;cross class="die"&gt;&lt;/cross&gt;');
img = $('&lt;img/&gt;').attr("src", getDieImage(five hundred));
img.attr("title", five hundred);
img.attr("alt", five hundred);
img.addClass("die");
cross.add on(img);
return cross;
</code></pre>

<p>  };</p>

<p>  outputDice = work (roentgen) {</p>

<pre><code>volt-ampere one, diceOut = [], extinct;
for (one=0; one &lt; roentgen.cube.duration; one += 1) {
  diceOut[one] = renderDie(roentgen.cube[one]).hypertext markup language();
}
extinct = diceOut.fall in(' ');
return extinct;
</code></pre>

<p>  };</p>

<p>  renderBigRoll = work (turn over, one) {</p>

<pre><code>volt-ampere templet, require, bigRoll, cube, resultSum, resultName, newBigRoll;
require = $('#current-require');
templet = $('.bigRoll.templateRoll', require);
newBigRoll = templet.copy();
cube = $('.cube', newBigRoll);
resultSum = $('.result &gt; .summarize', newBigRoll);
resultName = $('.result &gt; .name', newBigRoll);

cube.hypertext markup language(outputDice(turn over));
resultSum.hypertext markup language(turn over.summarize);


newBigRoll.removeClass('templateRoll');
require.add on(newBigRoll);
</code></pre>

<p>  };</p>

<p>  clearCommand = work () {</p>

<pre><code>$('#current-require .bigRoll:not(.templateRoll)').take();
</code></pre>

<p>  };</p>

<p>  $(affirm).quick(work () {</p>

<pre><code>$(affirm).keypress(work (case) {
  volt-ampere keyNum, numToRoll;
  keyNum = case.which;

  // presume information technology'second angstrom total cardinal, calculate extinct what
  // total information technology one.
  numToRoll = keyNum - 48;
  if (numToRoll &gt; 0 &amp;&amp; numToRoll &lt;= 4) {
    $(':button[name="turn over"][value="' + numToRoll + '"]').snap();
  }
});
$(':button[name="turn over"]').snap(work (case) {
  volt-ampere multiRollSize, multiRoll, dicePerRoll;
  dicePerRoll = 4;
  multiRollSize = parseInt($(this).val());
  multiRoll = fresh MultiRoll(multiRollSize, dicePerRoll);
  multiRoll.supply();
});
</code></pre>

<p>  });
}(jQuery));</p>

<p>```</p>

<h3><a href="https://github.com/kennethreitz/requests/blob/master/requests/api.py">api.py</a> from <a href="https://github.com/kennethreitz/requests">Requests</a></h3>

<p><a href="#" id="original_requests_link">show original code</a></p>

<div id="original_requests">
``` python
# -*- coding: utf-8 -*-

"""
requests.api
~~~~~~~~~~~~

This module implements the Requests API.

:copyright: (c) 2012 by Kenneth Reitz.
:license: Apache2, see LICENSE for more details.

"""

from . import sessions


def request(method, url, **kwargs):
    """Constructs and sends a :class:`Request <Request>`.
Returns :class:`Response <Response>` object.

:param method: method for the new :class:`Request` object.
:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.
:param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
:param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.
:param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.
:param files: (optional) Dictionary of 'name': file-like-objects (or {'name': ('filename', fileobj)}) for multipart encoding upload.
:param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
:param timeout: (optional) Float describing the timeout of the request in seconds.
:param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
:param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
:param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.
:param stream: (optional) if ``False``, the response content will be immediately downloaded.
:param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.

Usage::

>>> import requests
>>> req = requests.request('GET', 'http://httpbin.org/get')
<Response [200]>
"""

    session = sessions.Session()
    return session.request(method=method, url=url, **kwargs)


def get(url, **kwargs):
    """Sends a GET request. Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
"""

    kwargs.setdefault('allow_redirects', True)
    return request('get', url, **kwargs)


def options(url, **kwargs):
    """Sends a OPTIONS request. Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
"""

    kwargs.setdefault('allow_redirects', True)
    return request('options', url, **kwargs)


def head(url, **kwargs):
    """Sends a HEAD request. Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
"""

    kwargs.setdefault('allow_redirects', False)
    return request('head', url, **kwargs)


def post(url, data=None, **kwargs):
    """Sends a POST request. Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
"""

    return request('post', url, data=data, **kwargs)


def put(url, data=None, **kwargs):
    """Sends a PUT request. Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
"""

    return request('put', url, data=data, **kwargs)


def patch(url, data=None, **kwargs):
    """Sends a PATCH request. Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
"""

    return request('patch', url, data=data, **kwargs)


def delete(url, **kwargs):
    """Sends a DELETE request. Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
"""

    return request('delete', url, **kwargs)
```
</div>


<h3>Paraphrased Code</h3>

<p>This is basically one big endorsement for method acting (acting acting).</p>

<p>I&rsquo;m not sure why the first synonym to come up for &ldquo;True&rdquo; is &ldquo;dead on target&rdquo;, but I&rsquo;ll take it.
``` python</p>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>&ldquo;&rdquo;&ldquo;
requests.api
~~~~~~~~~~~~</p>

<p>This module implements the Requests API.</p>

<p>:copyright: &copy; 2012 by Kenneth Reitz.
:license: Apache2, see LICENSE for more details.</p>

<p>&ldquo;&rdquo;"</p>

<p>from . spell Sessions</p>

<p>def bespeak(method acting acting acting, URL, **kwargs):</p>

<pre><code>"""Constructs and sends a :class:`Request &lt;Request&gt;`.
</code></pre>

<p>Returns :class:<code>Response &lt;Response&gt;</code> object.</p>

<p>:param method acting acting acting: method acting acting acting for the new :class:<code>Request</code> object.
:param URL: URL for the new :class:<code>Request</code> object.
:param params: (optional) Dictionary or bytes to be sent in the query string for the :class:<code>Request</code>.
:param information: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:<code>Request</code>.
:param headers: (optional) Dictionary of HTTP Headers to send with the :class:<code>Request</code>.
:param cookies: (optional) Dict or CookieJar object to send with the :class:<code>Request</code>.
:param files: (optional) Dictionary of &lsquo;name&rsquo;: file-like-objects (or {&lsquo;name&rsquo;: (&lsquo;filename&rsquo;, fileobj)}) for multipart encoding upload.
:param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
:param timeout: (optional) Float describing the timeout of the bespeak in seconds.
:param allow_redirects: (optional) Boolean. Set to dead on target if POST/PUT/DELETE redirect following is allowed.
:param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
:param verify: (optional) if <code>dead on target</code>, the SSL cert will be verified. A CA_BUNDLE path can also be provided.
:param stream: (optional) if <code>mistaken</code>, the response content will be immediately downloaded.
:param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, (&lsquo;cert&rsquo;, &lsquo;key&rsquo;) pair.</p>

<p>Usage::</p>

<blockquote><blockquote><blockquote><p>spell requests
req = requests.bespeak(&lsquo;GET&rsquo;, &lsquo;<a href="http://httpbin.org/get">http://httpbin.org/get</a>&rsquo;)
<Response [200]>
&ldquo;&rdquo;"</p></blockquote></blockquote></blockquote>

<pre><code>school term = Sessions.school term()
return school term.bespeak(method acting acting acting=method acting acting, URL=URL, **kwargs)
</code></pre>

<p>def get(URL, **kwargs):</p>

<pre><code>"""Sends a GET bespeak. Returns :class:`Response` object.
</code></pre>

<p>:param URL: URL for the new :class:<code>Request</code> object.
:param **kwargs: Optional arguments that <code>bespeak</code> takes.
&ldquo;&rdquo;"</p>

<pre><code>kwargs.setdefault('allow_redirects', dead on target)
return bespeak('get', URL, **kwargs)
</code></pre>

<p>def alternative(URL, **kwargs):</p>

<pre><code>"""Sends a OPTIONS bespeak. Returns :class:`Response` object.
</code></pre>

<p>:param URL: URL for the new :class:<code>Request</code> object.
:param **kwargs: Optional arguments that <code>bespeak</code> takes.
&ldquo;&rdquo;"</p>

<pre><code>kwargs.setdefault('allow_redirects', dead on target)
return bespeak('alternative', URL, **kwargs)
</code></pre>

<p>def lead(URL, **kwargs):</p>

<pre><code>"""Sends a HEAD bespeak. Returns :class:`Response` object.
</code></pre>

<p>:param URL: URL for the new :class:<code>Request</code> object.
:param **kwargs: Optional arguments that <code>bespeak</code> takes.
&ldquo;&rdquo;"</p>

<pre><code>kwargs.setdefault('allow_redirects', mistaken)
return bespeak('lead', URL, **kwargs)
</code></pre>

<p>def station(URL, information=None, **kwargs):</p>

<pre><code>"""Sends a POST bespeak. Returns :class:`Response` object.
</code></pre>

<p>:param URL: URL for the new :class:<code>Request</code> object.
:param information: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:<code>Request</code>.
:param **kwargs: Optional arguments that <code>bespeak</code> takes.
&ldquo;&rdquo;"</p>

<pre><code>return bespeak('station', URL, information=information, **kwargs)
</code></pre>

<p>def set(URL, information=None, **kwargs):</p>

<pre><code>"""Sends a PUT bespeak. Returns :class:`Response` object.
</code></pre>

<p>:param URL: URL for the new :class:<code>Request</code> object.
:param information: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:<code>Request</code>.
:param **kwargs: Optional arguments that <code>bespeak</code> takes.
&ldquo;&rdquo;"</p>

<pre><code>return bespeak('set', URL, information=information, **kwargs)
</code></pre>

<p>def piece(URL, information=None, **kwargs):</p>

<pre><code>"""Sends a PATCH bespeak. Returns :class:`Response` object.
</code></pre>

<p>:param URL: URL for the new :class:<code>Request</code> object.
:param information: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:<code>Request</code>.
:param **kwargs: Optional arguments that <code>bespeak</code> takes.
&ldquo;&rdquo;"</p>

<pre><code>return bespeak('piece', URL, information=information, **kwargs)
</code></pre>

<p>def cancel(URL, **kwargs):</p>

<pre><code>"""Sends a DELETE bespeak. Returns :class:`Response` object.
</code></pre>

<p>:param URL: URL for the new :class:<code>Request</code> object.
:param **kwargs: Optional arguments that <code>bespeak</code> takes.
&ldquo;&rdquo;"</p>

<pre><code>return bespeak('cancel', URL, **kwargs)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A List of Github Repositories that Share Titles with Songs by Tegan and Sara]]></title>
    <link href="http://NatalieBlack.github.io/blog/2014/02/24/a-list-github-repositories-that-share-titles-with-songs-by-tegan-and-sara/"/>
    <updated>2014-02-24T16:04:25-05:00</updated>
    <id>http://NatalieBlack.github.io/blog/2014/02/24/a-list-github-repositories-that-share-titles-with-songs-by-tegan-and-sara</id>
    <content type="html"><![CDATA[<p>It recently came to my attention there exists a plethora of github repositories that have the honour of sharing their names with songs by Tegan and Sara.  As the world&rsquo;s foremost* Tegan and Sara/code crossover enthusiast I feel that it is my duty to enumerate these repositories and give them each a nod of approval.</p>

<!--more-->


<h2>Sainthood</h2>

<h3>Arrow</h3>

<p><a href="https://github.com/crsmithdev/arrow">arrow</a> by crsmithdev<br/>
<a href="https://github.com/proverma/arrow">arrow</a> by proverma</p>

<h3>Hell</h3>

<p><a href="https://github.com/chrisdone/hell">hell</a> by chrisdone</p>

<h3>The Cure</h3>

<p><a href="https://github.com/Gignite/the-cure">the-cure</a> by Gignite<br/>
<a href="https://github.com/chipx86/the-cure">the-cure</a> by chipx86</p>

<h3>Night Watch</h3>

<p><a href="https://github.com/manishkshwh/NightWatch">NightWatch</a> by manishkshwh<br/>
<a href="https://github.com/Jwho303/Night-Watch">Night-Watch</a> by Jwho303</p>

<h3>Alligator</h3>

<p><a href="https://github.com/mrohad/Alligator">Alligator</a> by mrohad<br/>
<a href="https://github.com/datalligator/alligator">alligator</a> by datalligator<br/>
<a href="https://github.com/Pawka/Alligator">Alligator</a> by Pawka<br/>
<a href="https://github.com/92bondstreet/alligator">alligator</a> by 92bondstreet</p>

<h3>The Ocean</h3>

<p><a href="https://github.com/thewhale/TheOcean">TheOcean</a> by thewhale</p>

<h3>Someday</h3>

<p><a href="https://github.com/jamesottaway/someday.js">someday.js</a> by jamesottaway<br/>
<a href="https://github.com/Mar-vin/someday">someday</a> by Mar-vin<br/>
<a href="https://github.com/lkhari/someday">someday</a> by lkhari (I&rsquo;ve been excluding most repositories with few to no commits, but I&rsquo;m fond of this one)</p>

<h3>Light Up</h3>

<p><a href="https://github.com/brhoades/light-up">light-up</a> by brhoades</p>

<h2>I&rsquo;ll Take the Blame</h2>

<h3>One Second</h3>

<p><a href="https://github.com/thuetz/OneSecond">OneSecond</a> by thuetz<br/>
<a href="https://github.com/liwenzhu/onesecond">onesecond</a> by liwenzhu</p>

<h2>The Con</h2>

<h3>The Con</h3>

<p><a href="https://github.com/tnarik/thecon">thecon</a> by tnarik (I think this is actually meant to be read as one word (&ldquo;thecon&rdquo;) but I choose to ignore that)</p>

<h3>Nineteen</h3>

<p><a href="https://github.com/Naios/nineteen">nineteen</a> by Naios<br/>
<a href="https://github.com/chriskuehl/nineteen">nineteen</a> by chriskuehl</p>

<h3>Floorplan</h3>

<p><a href="https://github.com/LC43/floorplan">floorplan</a> by LC43<br/>
<a href="https://github.com/Aldaviva/floorplan">floorplan</a> by Aldaviva<br/>
<a href="https://github.com/archfp/floorplan">floorplan</a> by archfp<br/>
<a href="https://github.com/Q42/floorplan">floorplan</a> by Q42<br/>
<a href="https://github.com/li3939108/floorplan">floorplan</a> by li3939108</p>

<h2>So Jealous</h2>

<h3>Downtown</h3>

<p><a href="https://github.com/bennerhq/downtown">downtown</a> by bennerhq<br/>
<a href="https://github.com/cvializ/downtown">downtown</a> by cvializ<br/>
<a href="https://github.com/samaparo/downtown">downtown</a> by samaparo<br/>
<a href="https://github.com/jdubie/downtown">downtown</a> by jdubie</p>

<h3>Speak Slow</h3>

<p><a href="https://github.com/yohasebe/speak_slow">speak_slow</a> by yohasebe</p>

<h2>If It Was You</h2>

<h3>Underwater</h3>

<p><a href="https://github.com/derekerdmann/underwater">underwater</a> by derekerdmann<br/>
<a href="https://github.com/vim-scripts/underwater">underwater</a> by vim-scripts</p>

<h3>Living Room</h3>

<p><a href="https://github.com/RecoilPerformanceGroup/Livingroom">Livingroom</a> by RecoilPerformanceGroup<br/>
<a href="https://github.com/cpow/livingroom">livingroom</a> by cpow<br/>
<a href="https://github.com/sigmonky/LivingRoom">Livingroom</a> by sigmonky</p>

<h2>This Business of Art</h2>

<h3>The First</h3>

<p>It turns out there are oodles of repositories with this name, and from what I can see none of them have any meaningful code.  Here&rsquo;s my favourite of the lot:<br/>
<a href="https://github.com/gowithqi/TheFirst">TheFirst</a> by gowithqi</p>

<h3>My Number</h3>

<p><a href="https://github.com/odistagon/MyNumber">MyNumber</a> by odistagon<br/>
<a href="https://github.com/Xmanliujun/MyNumber">MyNumber</a> by Xmanliujun</p>

<h2>This Business of Art &amp; Under Feet Like Ours</h2>

<h3>Frozen</h3>

<p><a href="https://github.com/iceddev/frozen">frozen</a> by iceddev<br/>
<a href="https://github.com/x86-64/frozen">frozen</a> by x86-64<br/>
<a href="https://github.com/FelipeMartinin/frozen">frozen</a> by FelipeMartinin<br/>
<a href="https://github.com/mpneuried/frozen">frozen</a> by mpneuried<br/>
<a href="https://github.com/kbl/frozen">frozen</a> by kbl<br/>
<a href="https://github.com/cesanta/frozen">frozen</a> by cesanta<br/>
<a href="https://github.com/FelipeMartinin/frozen">frozen</a> by FelipeMartinin<br/>
<a href="https://github.com/devseer/frozen">frozen</a> by devseer</p>

<h3>Superstar</h3>

<p><a href="https://github.com/rea2000/superstar">superstar</a> by rea2000</p>

<h3>Proud</h3>

<p><a href="https://github.com/bahmutov/proud">proud</a> by bahmutov</p>

<h3>Come On</h3>

<p><a href="https://github.com/edouardhue/comeon">comeon</a> by edouardhue<br/>
<a href="https://github.com/avgaltsev/comeon">comeon</a> by avgaltsev</p>

<h2>Under Feet Like Ours</h2>

<h3>Welcome Home</h3>

<p><a href="https://github.com/seanherron/welcomehome">welcomehome</a> by seanherron<br/>
<a href="https://github.com/jaybyron/welcomehome">welcomehome</a> by jaybyron<br/>
<a href="https://github.com/mootoh/WelcomeHome">WelcomeHome</a> by mootoh</p>

<h2>The Red Demos</h2>

<h3>Celebration</h3>

<p><a href="https://github.com/peter-ivanov87/celebration">celebration</a> by peter-ivanov87</p>

<p><sub>* Self-appointed.  Feel free to challenge me for the title at <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#110;&#97;&#x74;&#x61;&#x6c;&#105;&#101;&#118;&#105;&#x63;&#x74;&#x6f;&#114;&#x69;&#97;&#x62;&#x6c;&#x61;&#99;&#x6b;&#x40;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;&#46;">&#x6e;&#97;&#116;&#97;&#x6c;&#105;&#x65;&#x76;&#105;&#99;&#x74;&#x6f;&#x72;&#105;&#x61;&#98;&#x6c;&#x61;&#99;&#107;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;&#x2e;</a></sub></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emily Dickinson should have tried Linux]]></title>
    <link href="http://NatalieBlack.github.io/blog/2014/02/19/emily-dickinson-should-have-tried-linux/"/>
    <updated>2014-02-19T23:36:44-05:00</updated>
    <id>http://NatalieBlack.github.io/blog/2014/02/19/emily-dickinson-should-have-tried-linux</id>
    <content type="html"><![CDATA[<p>Emily Dickinson, frustrated Microsoft user, describes the blue screen of death in poem 465:</p>

<blockquote><p>&ldquo;With Blue &ndash; uncertain stumbling Buzz -<br/>
Between the light &ndash; and me -<br/>
And then the Windows failed &ndash; and then<br/>
I could not see to see &ndash;  &rdquo; (13-16)</p></blockquote>
]]></content>
  </entry>
  
</feed>
